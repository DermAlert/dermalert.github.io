{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DermAlert","text":""},{"location":"codigo-de-conduta/","title":"C\u00f3digo de Conduta","text":""},{"location":"codigo-de-conduta/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor Revisor <code>1.0</code> xx/xx/xxxx xxxx xxxx"},{"location":"guia-de-contribuicao/","title":"Guia de Contribui\u00e7\u00e3o","text":""},{"location":"guia-de-contribuicao/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor Revisor <code>1.0</code> xx/xx/xxxx xxxx xxxx"},{"location":"documentacao-tecnica/backend/","title":"DermAlert | Backend","text":""},{"location":"documentacao-tecnica/backend/#visao-geral","title":"\ud83d\udcc4 Vis\u00e3o Geral","text":"<p>O backend da aplica\u00e7\u00e3o DermAlert foi constru\u00eddo em Python utilizando o framework FastAPI, que oferece alta performance, suporte a tipagem est\u00e1tica com Python 3.10+ e gera\u00e7\u00e3o autom\u00e1tica de documenta\u00e7\u00e3o. A arquitetura foi projetada com foco na modulariza\u00e7\u00e3o. O backend \u00e9 respons\u00e1vel por toda a l\u00f3gica de neg\u00f3cio, autentica\u00e7\u00e3o, persist\u00eancia de dados e integra\u00e7\u00e3o com o aplicativo mobile.</p> <p>Entre os principais recursos, destacam-se a integra\u00e7\u00e3o com banco de dados relacional via SQLAlchemy, gerenciamento de migra\u00e7\u00f5es com Alembic, autentica\u00e7\u00e3o baseada em JWT, e suporte a CORS para comunica\u00e7\u00e3o com o frontend. O sistema conta ainda com scripts de inicializa\u00e7\u00e3o e populariza\u00e7\u00e3o do banco de dados, al\u00e9m de rotas organizadas por responsabilidade funcional, como usu\u00e1rios, atendimentos e unidades de sa\u00fade.</p>"},{"location":"documentacao-tecnica/backend/#principais-tecnologias","title":"\ud83d\udee0\ufe0f Principais Tecnologias","text":"<p>As principais ferramentas e bibliotecas empregadas s\u00e3o:</p> <ul> <li> <p>FastAPI: Framework web moderno e de alto desempenho para a constru\u00e7\u00e3o de APIs em Python. Destaca-se pela facilidade de uso, rapidez e suporte nativo \u00e0 valida\u00e7\u00e3o de dados e documenta\u00e7\u00e3o autom\u00e1tica.\u200b</p> </li> <li> <p>SQLAlchemy: Biblioteca de mapeamento objeto-relacional (ORM) que facilita a intera\u00e7\u00e3o com bancos de dados relacionais, permitindo manipular dados de forma mais intuitiva e segura.\u200b</p> </li> <li> <p>Alembic: Ferramenta de migra\u00e7\u00e3o de banco de dados que trabalha em conjunto com o SQLAlchemy, permitindo gerenciar vers\u00f5es e altera\u00e7\u00f5es no esquema do banco de dados de forma controlada.\u200b</p> </li> <li> <p>Docker Compose: Ferramenta que facilita a defini\u00e7\u00e3o e execu\u00e7\u00e3o de aplica\u00e7\u00f5es multi-cont\u00eainer, permitindo orquestrar servi\u00e7os, redes e volumes de forma declarativa.\u200b</p> </li> <li> <p>Poetry: Gerenciador de depend\u00eancias e ambientes virtuais para Python, que simplifica a instala\u00e7\u00e3o e o gerenciamento de bibliotecas, garantindo reprodutibilidade e isolamento do ambiente.</p> </li> </ul>"},{"location":"documentacao-tecnica/backend/#estrutura-de-pastas","title":"\ud83d\udcc1 Estrutura de Pastas","text":"<pre><code>\ud83d\udcc1 backend\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc1 .github\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 workflows\n\u2502       \u2514\u2500\u2500 \ud83d\udcdd CI/CD (GitHub Actions)\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc1 kubernetes\n\u2502   \u2514\u2500\u2500 \ud83e\udde9 Manifests de implanta\u00e7\u00e3o (YAMLs)\n\u2502       \u2514\u2500\u2500 \ud83d\udcc4 deploy.yaml, service.yaml, etc.\n\u2502\n\u2514\u2500\u2500 \ud83d\udcc1 project\n    \u2502\n    \u251c\u2500\u2500 \ud83d\udcc1 app\n    \u2502   \u2502\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc1 api\n    \u2502   \u2502   \u2514\u2500\u2500 \ud83d\udcc1 routes\n    \u2502   \u2502       \u2514\u2500\u2500 \ud83e\udde9 Arquivos de rotas agrupadas (user_routes.py, admin_routes.py, etc.)\n    \u2502   \u2502\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc1 core\n    \u2502   \u2502   \u2514\u2500\u2500 \u2699\ufe0f Configura\u00e7\u00f5es centrais da aplica\u00e7\u00e3o (lifespan, CORS, inicializa\u00e7\u00e3o)\n    \u2502   \u2502\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc1 crud\n    \u2502   \u2502   \u2514\u2500\u2500 \ud83d\udcc4 Opera\u00e7\u00f5es de Create, Read, Update, Delete\n    \u2502   \u2502\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc1 database\n    \u2502   \u2502   \u251c\u2500\u2500 \ud83d\udcc4 models.py (modelos ORM)\n    \u2502   \u2502   \u251c\u2500\u2500 \ud83d\udcc4 database.py (conex\u00e3o com o banco)\n    \u2502   \u2502   \u2514\u2500\u2500 \ud83d\udcc4 seed.py / populate_data.py (popular dados de exemplo)\n    \u2502   \u2502\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 utils\n    \u2502       \u2514\u2500\u2500 \ud83e\uddf0 Fun\u00e7\u00f5es auxiliares e helpers\n    \u2502\n    \u2514\u2500\u2500 \ud83d\udcc1 migrations\n        \u2514\u2500\u2500 \ud83d\udcc1 versions\n            \u2514\u2500\u2500 \ud83d\udcc4 Arquivos de migra\u00e7\u00e3o gerados pelo Alembic\n</code></pre>"},{"location":"documentacao-tecnica/backend/#rotas-da-aplicacao","title":"\ud83c\udf10 Rotas da Aplica\u00e7\u00e3o","text":"Rota M\u00e9todo Descri\u00e7\u00e3o Permiss\u00e3o Corpo da Requisi\u00e7\u00e3o Resposta <code>/admin/convidar-usuario</code> POST Cadastra ou reenvia convite para um novo usu\u00e1rio pendente Apenas <code>ADMIN</code> <code>{ cpf, email, unidade_saude_id, role_id }</code> <code>{ \"message\": \"Convite enviado com sucesso!\" }</code> <code>/admin/editar-usuario</code> POST Edita dados de um usu\u00e1rio (unidade, permiss\u00e3o e status ativo/inativo) Apenas <code>ADMIN</code> <code>{ cpf, unidade_saude, role_id, fl_ativo }</code> Retorna o usu\u00e1rio atualizado <code>/api/eventos/</code> GET Lista todos os eventos cadastrados Qualquer usu\u00e1rio - Lista de eventos <code>/api/eventos/</code> POST Cria um novo evento <code>ADMIN</code> <code>{ \"titulo\": \"Evento A\", \"data\": \"2025-05-01\", \"descricao\": \"...\" }</code> Objeto do evento criado <code>/api/eventos/{id}/</code> GET Detalha um evento espec\u00edfico Qualquer usu\u00e1rio - Objeto do evento <code>/api/eventos/{id}/</code> PUT Atualiza um evento <code>ADMIN</code> <code>{ \"titulo\": \"Evento Atualizado\", \"data\": \"2025-05-01\", \"descricao\": \"...\" }</code> Objeto do evento atualizado <code>/api/eventos/{id}/</code> DELETE Remove um evento <code>ADMIN</code> - Confirma\u00e7\u00e3o de remo\u00e7\u00e3o <code>/redirect</code> GET Redireciona o usu\u00e1rio para o app DermAlert Qualquer usu\u00e1rio Par\u00e2metros de query: <code>token</code>, <code>source</code> HTML com redirecionamento via JavaScript <code>/supervisor/convidar-usuario</code> POST Envia convite para novo usu\u00e1rio vinculado \u00e0 mesma Unidade de Sa\u00fade <code>SUPERVISOR</code> <code>UserCreateSupervisorSchema</code> <code>{ \"message\": \"Convite enviado com sucesso!\" }</code> <code>/supervisor/editar-usuario</code> POST Edita permiss\u00e3o e status de usu\u00e1rio da mesma Unidade de Sa\u00fade <code>SUPERVISOR</code> <code>SupervisorUserEdit</code> <code>UserOut</code> (dados atualizados do usu\u00e1rio) <code>/token</code> POST Gera tokens de acesso e refresh com base em CPF e senha P\u00fablica (Login) <code>username</code> (CPF), <code>password</code> (OAuth2PasswordRequestForm) <code>{ \"access_token\": \"...\", \"refresh_token\": \"...\", \"token_type\": \"bearer\" }</code> <code>/token/get-current-user</code> GET Retorna as informa\u00e7\u00f5es do usu\u00e1rio autenticado Qualquer usu\u00e1rio autenticado - <code>UserOut</code> (com roles e unidadeSaude) <code>/token/refresh</code> POST Gera novos tokens a partir de um refresh token v\u00e1lido Qualquer usu\u00e1rio com token v\u00e1lido <code>TokenRefresh</code> (<code>{\"refresh_token\": \"...\"}</code>) <code>{ \"access_token\": \"...\", \"refresh_token\": \"...\", \"token_type\": \"bearer\" }</code> <code>/cadastrar-unidade-saude</code> POST Cadastra uma nova Unidade de Sa\u00fade <code>ADMIN</code> <code>UnidadeSaudeCreateSchema</code> Objeto <code>UnidadeSaude</code> <code>/listar-unidades-saude</code> GET Lista todas as Unidades de Sa\u00fade P\u00fablica - Lista de <code>UnidadeSaude</code> <code>/listar-unidade-saude/{unidade_id}</code> GET Retorna uma Unidade de Sa\u00fade com total de pacientes e profissionais P\u00fablica - Dados da unidade + contagens <code>/editar-unidade-saude/{unidade_id}</code> POST Atualiza os dados de uma Unidade de Sa\u00fade <code>ADMIN</code> <code>UnidadeSaudeUpdateSchema</code> Objeto <code>UnidadeSaude</code> atualizado <code>/listar-usuarios-unidade-saude/{unidade_id}</code> GET Lista os usu\u00e1rios ativos da Unidade de Sa\u00fade com n\u00edvel de acesso <code>SUPERVISOR</code> - Lista de <code>UserResponseSchema</code> <code>/completar-cadastro</code> POST Completa o cadastro de um usu\u00e1rio usando um token e os dados fornecidos Usu\u00e1rio com token - Confirma\u00e7\u00e3o do cadastro <code>/dados-completar-cadastro</code> GET Retorna dados do usu\u00e1rio antes de completar o cadastro Usu\u00e1rio com token - Dados parciais do usu\u00e1rio <code>/dados-resetar-senha</code> GET Retorna o e-mail do usu\u00e1rio a partir de um token de redefini\u00e7\u00e3o de senha Usu\u00e1rio com token - E-mail do usu\u00e1rio <code>/esqueci-minha-senha</code> POST Envia e-mail com link/token para redefini\u00e7\u00e3o de senha P\u00fablica <code>email</code> Confirma\u00e7\u00e3o de envio do e-mail <code>/resetar-senha</code> POST Redefine a senha do usu\u00e1rio usando token e nova senha Usu\u00e1rio com token <code>nova_senha</code>, <code>token</code> Confirma\u00e7\u00e3o de redefini\u00e7\u00e3o <code>/alterar-senha</code> POST Altera a senha do usu\u00e1rio autenticado, validando a senha atual Qualquer usu\u00e1rio autenticado <code>senha_atual</code>, <code>nova_senha</code> Confirma\u00e7\u00e3o de altera\u00e7\u00e3o"},{"location":"documentacao-tecnica/backend/#como-rodar-a-aplicacao","title":"\ud83d\ude80 Como rodar a aplica\u00e7\u00e3o","text":""},{"location":"documentacao-tecnica/backend/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor Revisor <code>1.0</code> 05/04/2025 Cria documento e adiciona conte\u00fado, exceto \"Como rodar a aplica\u00e7\u00e3o\" Izabella Alves Davi Rodrigues"},{"location":"documentacao-tecnica/frontend/","title":"DermAlert | Frontend","text":""},{"location":"documentacao-tecnica/frontend/#visao-geral","title":"\ud83d\udcc4 Vis\u00e3o Geral","text":"<p>A aplica\u00e7\u00e3o DermAlert \u00e9 um aplicativo mobile multiplataforma desenvolvido com React Native, com suporte do Expo, Redux Toolkit para gerenciamento de estado global e React Navigation para navega\u00e7\u00e3o entre telas. O app tem como objetivo principal facilitar o registro, avalia\u00e7\u00e3o e acompanhamento cl\u00ednico de pacientes com les\u00f5es dermatol\u00f3gicas, especialmente voltado para o apoio ao diagn\u00f3stico de c\u00e2ncer de pele.</p>"},{"location":"documentacao-tecnica/frontend/#principais-tecnologias","title":"\ud83d\udee0\ufe0f Principais Tecnologias","text":"<p>A seguir, est\u00e3o descritas as principais ferramentas utilizadas no projeto:</p> <ul> <li> <p>React Native: Serve como a base da aplica\u00e7\u00e3o, permitindo o desenvolvimento de interfaces nativas para Android e iOS a partir de uma \u00fanica base de c\u00f3digo em JavaScript. Isso torna a manuten\u00e7\u00e3o e evolu\u00e7\u00e3o do app mais simples e eficiente.</p> </li> <li> <p>Expo: Framework que facilita o desenvolvimento com React Native. O Expo fornece um ambiente pr\u00e9-configurado com suporte a diversas funcionalidades nativas, como acesso \u00e0 c\u00e2mera e ao sistema de arquivos. No projeto, foi utilizada a nova CLI local do Expo \u2014 recomendada a partir do SDK 46 \u2014 garantindo compatibilidade com vers\u00f5es recentes do Node.js e maior estabilidade.</p> </li> <li> <p>React Navigation: Biblioteca respons\u00e1vel pela navega\u00e7\u00e3o entre telas no aplicativo. Com ela, \u00e9 poss\u00edvel implementar navega\u00e7\u00f5es por pilhas (stacks), abas (tabs) e rotas personalizadas, oferecendo uma experi\u00eancia fluida ao usu\u00e1rio.</p> </li> <li> <p>Expo Camera: Recurso da pr\u00f3pria plataforma Expo, utilizado para capturar imagens diretamente da c\u00e2mera do dispositivo. Essa funcionalidade \u00e9 essencial para o prop\u00f3sito principal da aplica\u00e7\u00e3o, que envolve o registro de les\u00f5es de pele.</p> </li> <li> <p>Expo File System: Ferramenta que permite a manipula\u00e7\u00e3o e o armazenamento de arquivos localmente no dispositivo. No caso da DermAlert, \u00e9 usada principalmente para armazenar temporariamente as imagens capturadas.</p> </li> <li> <p>AsyncStorage (@react-native-async-storage/async-storage): Biblioteca usada para persist\u00eancia de dados no dispositivo, como prefer\u00eancias do usu\u00e1rio ou informa\u00e7\u00f5es de sess\u00e3o. Isso permite que a aplica\u00e7\u00e3o mantenha dados importantes mesmo quando est\u00e1 offline.</p> </li> </ul>"},{"location":"documentacao-tecnica/frontend/#perfis-de-usuario","title":"\ud83d\udc65 Perfis de Usu\u00e1rio","text":"<p>A aplica\u00e7\u00e3o define dois perfis principais:</p> <ul> <li> <p>Profissional de sa\u00fade (usu\u00e1rio padr\u00e3o): pode realizar atendimentos, registrar pacientes, preencher formul\u00e1rios cl\u00ednicos e capturar imagens de les\u00f5es.</p> </li> <li> <p>Administrador: al\u00e9m das funcionalidades de um profissional comum, pode cadastrar, editar e visualizar profissionais de sa\u00fade e unidades de atendimento.</p> </li> </ul>"},{"location":"documentacao-tecnica/frontend/#estrutura-de-pastas","title":"\ud83d\udcc1 Estrutura de Pastas","text":"<pre><code>\u251c\u2500\u2500 App.tsx                 # Arquivo principal com as rotas\n\u251c\u2500\u2500 pages/                 # Telas do aplicativo\n\u2502   \u251c\u2500\u2500 admin/             # Telas do administrador\n\u2502   \u251c\u2500\u2500 user/              # Telas do usu\u00e1rio comum\n\u2502   \u2502   \u251c\u2500\u2500 lesoes/        # Telas relacionadas a les\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 consent/       # Telas de consentimento\n\u2502   \u2502   \u251c\u2500\u2500 questionario/  # Question\u00e1rio de anamnese\n\u2502   \u2514\u2500\u2500 unidadeSaude/      # Telas para unidades de sa\u00fade\n\u251c\u2500\u2500 store/                 # Redux: slices e store central\n\u251c\u2500\u2500 components/            # Componentes reutiliz\u00e1veis\n\u251c\u2500\u2500 services/              # Integra\u00e7\u00e3o com APIs\n\u2514\u2500\u2500 utils/                 # Fun\u00e7\u00f5es utilit\u00e1rias\n</code></pre>"},{"location":"documentacao-tecnica/frontend/#telas-e-funcionalidades","title":"\ud83d\udcf1Telas e Funcionalidades","text":"<p>O aplicativo \u00e9 organizado em m\u00f3dulos funcionais que refletem o fluxo cl\u00ednico e administrativo da plataforma:</p> <ul> <li> <p>Autentica\u00e7\u00e3o e Acesso: Login, Register, CreatePassword, EsqueciSenha, RedefinirSenha, SuccessScreen, e NoRegistration.</p> </li> <li> <p>Atendimento e Cadastro de Pacientes: Home, NovoAtendimento, NovoPaciente.</p> </li> <li> <p>Registro de Les\u00f5es: InjuryList, AddInjury, InjuryLocation, Camera, PhotoPreview. Essas telas permitem registrar e fotografar les\u00f5es, al\u00e9m de indicar sua localiza\u00e7\u00e3o anat\u00f4mica.</p> </li> <li> <p>Question\u00e1rio Cl\u00ednico: QuestoesGeraisSaude, AvaliacaoFototipo, HistoricoCancer, FatoresRisco, InvestigacaoLesoes, ResultadoAnamnese. Um formul\u00e1rio detalhado \u00e9 preenchido durante o atendimento para levantamento de fatores de risco.</p> </li> <li> <p>Consentimento Informado: ConsentTermScreen, SignatureCameraScreen, SignaturePreviewScreen. Coleta da assinatura do paciente diretamente no dispositivo.</p> </li> <li> <p>Administra\u00e7\u00e3o (somente administradores): HomeAdmin, ProfessionalsList, RegisterProfessional, EditProfessional, HealthUnitList, RegisterHealthUnit, EditHealthUnit.</p> </li> </ul>"},{"location":"documentacao-tecnica/frontend/#como-rodar-a-aplicacao","title":"\ud83d\ude80 Como rodar a aplica\u00e7\u00e3o","text":""},{"location":"documentacao-tecnica/frontend/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Antes de rodar a aplica\u00e7\u00e3o, certifique-se de ter os seguintes itens instalados em sua m\u00e1quina:</p> <ul> <li> <p>Node.js (recomenda-se a vers\u00e3o LTS)</p> </li> <li> <p>Npm ou Yarn</p> </li> <li> <p>Expo CLI \u2013 Instale com:</p> </li> </ul> <pre><code>npm install -g expo-cli\n</code></pre> <ul> <li> <p>Um smartphone com o aplicativo Expo Go instalado (Android ou iOS) ou um emulador Android configurado</p> </li> <li> <p>Clone o reposit\u00f3rio</p> </li> </ul> <pre><code>git clone https://github.com/DermAlert/applicativo\ncd aplicativo\n</code></pre> <ol> <li>Instale as depend\u00eancias Com npm:</li> </ol> <pre><code>npm install\n</code></pre> <p>Ou com yarn:</p> <pre><code>yarn install\n</code></pre> <ol> <li>Inicie a aplica\u00e7\u00e3o com Expo</li> </ol> <pre><code>npx expo start\n</code></pre> <p>Isso abrir\u00e1 o Expo DevTools no navegador. A partir dele, voc\u00ea pode:</p> <ul> <li> <p>Escanear o QR code com o app Expo Go</p> </li> <li> <p>Executar no emulador Android</p> </li> <li> <p>Abrir em navegador com Web Preview</p> </li> </ul>"},{"location":"documentacao-tecnica/frontend/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor Revisor <code>1.0</code> 05/04/2025 Cria documento e adiciona conte\u00fado completo Izabella Alves Davi Rodrigues"}]}